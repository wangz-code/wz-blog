import{_ as s,c as i,o as a,a2 as e}from"./chunks/framework.DrxArEOS.js";const n="/images/lastblock.jpg",C=JSON.parse('{"title":"小程序 NFC 通讯","description":"","frontmatter":{"title":"小程序 NFC 通讯"},"headers":[],"relativePath":"docs/webapp/nfc.md","filePath":"docs/webapp/nfc.md"}'),h={name:"docs/webapp/nfc.md"},l=e('<h1 id="小程序-nfc-通讯" tabindex="-1">小程序 NFC 通讯 <a class="header-anchor" href="#小程序-nfc-通讯" aria-label="Permalink to &quot;小程序 NFC 通讯&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>最近要用微信小程序的 NFC 读写功能和支持 NFC 协议的卡片通讯, <a href="https://developers.weixin.qq.com/miniprogram/dev/api/device/nfc/wx.getNFCAdapter.html" target="_blank" rel="noreferrer">参见</a></p><p><code>通讯协议</code>: <a href="https://www.mwahiot.com/Service/mifare_classic_s50_technical_details.html" target="_blank" rel="noreferrer">参见</a><code>验密</code>: 根据卡片中存储的 keyA 或 keyB 进行验证, 验证通过后才能操作读写, 每次读写都需要验证密钥 <code>NFC卡片</code>: 我这边使用的是 MifareClassic, 这张卡片每次读写都需要<code>验密</code>, 有些其他的卡是不用<code>验密</code>,操作都是类似, 免密卡更简单 <code>小程序版本</code>: 基础库 2.11.2 开始支持，仅支持 Android 平台, ios 不支持</p><h2 id="差异" tabindex="-1">差异 <a class="header-anchor" href="#差异" aria-label="Permalink to &quot;差异&quot;">​</a></h2><p>标准 NFC 操作: 存在<code>扇区</code>和<code>块</code> 的概念, 我的这张卡有<code>16个扇区</code>, 每个扇区下有<code>4个块</code>, 扇区从<code>1开始</code>, 块从<code>0开始</code>, 小程序操作: 小程序抹去了扇区的概念, 统一使用<code>块</code>进行操作, 16 个扇区也就是共有 <code>16*4 = 64块</code>, 下标从<code>0块 ~ 63块</code></p><blockquote><p><code>注意!!!</code> 根据协议 每个扇区的<code>尾块</code>记录的是密钥, <code>[0~5]=keyA</code>, <code>[6~9]=访问控制</code>, <code> [11~15]=keyB</code> 比如 <code>1扇区3块</code>就是<code>尾块</code>(小程序的 3 块), <code>2扇区3块</code>也是<code>尾块</code>(小程序的 7 块) 由此可以得知每个扇区都可以单独加密 <img src="'+n+`" alt="alt 属性文本"></p></blockquote><ul><li>1 扇区 0 块 这里记录的是厂商信息,已经固化无法覆写, 只能读取</li><li>1 扇区 3 块 <code>尾块</code> 每个扇区的第 3 块(下标从 0 开始),这里记录的是密钥信息, 就是根据这里的数据进行验密 小程序的对应的就是 3,7,11 .....63 作为 <code>尾块</code><code>特别要注意这个尾块, 我就是不小心覆写了这个块导致我现有两块扇区都变成了死扇区, 密钥也忘记了是多少 </code></li></ul><h2 id="指令" tabindex="-1">指令 <a class="header-anchor" href="#指令" aria-label="Permalink to &quot;指令&quot;">​</a></h2><ul><li><code>0x60</code> 验密</li><li><code>0x30</code> 读取数据</li><li><code>0xA0</code> 写入数据</li></ul><p>统一格式: <code>[指令 1字节]</code>+<code>[块号 1字节]</code>+<code>[内容16字节]</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 验密指令 0x60</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每个块的验密要根据块号来  比如你要读写1块 那么验密的块号就是1块 不能验密1块读写7块, 7块要使用7块的验密</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> decryCmd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decryCmd[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:指令 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x60</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decryCmd[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:块号 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 对应 10进制的 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 就是1块, 如果要读取63块就是 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x3f</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decryCmd[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:内容 填充密钥信息, 一般卡片刚出场是默认是 6</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">个</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`0xFF\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 所以解密指令length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 读取指令 0x30</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> readCmd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">readCmd[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:指令 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x30</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">readCmd[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:块号 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 对应 10进制的 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 就是1块, 如果要读取63块就是 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x3f</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">readCmd[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:内容 按照协议标准的[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]是CRC </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">也就是</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`效验和\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  读取的时候没有要求 可以填充0xff</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 写入指令 0xA0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> writeCmd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">writeCmd[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:指令 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xA0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">writeCmd[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:块号 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 对应 10进制的 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 就是1块, 如果要读取63块就是 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x3f</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">writeCmd[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]:内容 按照协议标准的[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]是CRC </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">也就是</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`效验和\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 根据内容写入数据, 不足的可以填充0xff或0x00看你自己的喜好</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">写入成功后建议再读取一次,比较一些写入数据和读取的数据, 验证是否真的写入成功</span></span></code></pre></div><h2 id="流程" tabindex="-1">流程 <a class="header-anchor" href="#流程" aria-label="Permalink to &quot;流程&quot;">​</a></h2><ul><li>使用 wx.getNFCAdapter() 获取 NFC 适配器 <code> const NFCAdapter = wx.getNFCAdapter()</code></li><li>根据卡片类型调用对应的实例,所以对应的是 <code>NFCAdapter.getMifareClassic()</code> 获取 MifareClassic 实例，这个时候需要处理错误, 检查 NFC 功能是否开启, 是否允许访问 NFC 等等</li><li>读取操作: 验密=&gt;读取</li><li>读取操作: 验密=&gt;写入</li><li>读取操作: 验密=&gt;写入=&gt;读取 这种仅需要验密一次,亲测可行</li></ul><h2 id="踩坑" tabindex="-1">踩坑 <a class="header-anchor" href="#踩坑" aria-label="Permalink to &quot;踩坑&quot;">​</a></h2><p>锁死了两个扇区 8 个块, 这个卡变得不完美了</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>一定要先读协议再去操作, 关于这方面的文档太少了, 对于初次接触的时候还是有隐患在里面, 一直验密失败我还以为我代码写的有问题, 找了很多资料才知道把密钥给覆写了, 垃圾微信, 文档上多写一句感觉要死了一样!</p>`,18),t=[l];function k(p,d,r,c,o,E){return a(),i("div",null,t)}const F=s(h,[["render",k]]);export{C as __pageData,F as default};
